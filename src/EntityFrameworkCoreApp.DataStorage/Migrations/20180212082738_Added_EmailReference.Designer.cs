// <auto-generated />
using EntityFrameworkCoreApp.DataStorage;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace EntityFrameworkCoreApp.DataStorage.Migrations
{
    [DbContext(typeof(QADbContext))]
    [Migration("20180212082738_Added_EmailReference")]
    partial class Added_EmailReference
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EntityFrameworkCoreApp.DataStorage.Models.AnswerEntity", b =>
                {
                    b.Property<Guid>("AnswerId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTimeUTC");

                    b.Property<string>("Description")
                        .HasMaxLength(2000);

                    b.Property<Guid>("QuestionId");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("EntityFrameworkCoreApp.DataStorage.Models.EmailEntity", b =>
                {
                    b.Property<Guid>("EmailId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("GenerateDateTimeUTC");

                    b.Property<bool>("IsSent");

                    b.Property<DateTime?>("SendDateTimeUTC");

                    b.Property<string>("SendTo");

                    b.Property<string>("Title")
                        .HasMaxLength(200);

                    b.HasKey("EmailId");

                    b.ToTable("Email");
                });

            modelBuilder.Entity("EntityFrameworkCoreApp.DataStorage.Models.QuestionEntity", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTimeUTC");

                    b.Property<string>("Description")
                        .HasMaxLength(2000);

                    b.Property<string>("EmailAddress");

                    b.Property<Guid?>("EmailId");

                    b.Property<bool>("IsClosed");

                    b.Property<bool>("IsVerified");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<string>("Token");

                    b.HasKey("QuestionId");

                    b.HasIndex("EmailId")
                        .IsUnique()
                        .HasFilter("[EmailId] IS NOT NULL");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("EntityFrameworkCoreApp.DataStorage.Models.AnswerEntity", b =>
                {
                    b.HasOne("EntityFrameworkCoreApp.DataStorage.Models.QuestionEntity", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EntityFrameworkCoreApp.DataStorage.Models.QuestionEntity", b =>
                {
                    b.HasOne("EntityFrameworkCoreApp.DataStorage.Models.EmailEntity", "Email")
                        .WithOne("Question")
                        .HasForeignKey("EntityFrameworkCoreApp.DataStorage.Models.QuestionEntity", "EmailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
